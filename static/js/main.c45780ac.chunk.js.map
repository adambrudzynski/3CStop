{"version":3,"sources":["Components/Stop/gdanskFetcher.js","Components/Stop/gdyniaFetcher.js","Components/Stop/GdyniaStop.jsx","Components/Stop/Stop.jsx","Components/List/ListElement.tsx","Components/List/Filter/Filter.jsx","Components/List/List.tsx","utils/getDate.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchGdanskStop","id","url","fetch","then","response","contenttype","headers","get","charset","substring","indexOf","arrayBuffer","ab","dataView","DataView","TextDecoder","decode","replace","fetchGdyniaStop","a","axios","data","delay","console","log","GdyniaStop","stop","stopid","table","map","element","key","shortName","headSign","delayDesc","style","minWidth","Stop","stopId","useState","setTable","gdyniaStop","setGdyniaStop","loading","setLoading","useEffect","getGdansk","getGdynia","__html","dangerouslySetInnerHTML","ListElement","colapsed","setColapsed","Accordion","Title","active","onClick","Label","size","color","content","stopDesc","stopCode","circular","Content","Filter","search","name","stickyContext","operator","handleOperator","Sticky","context","Form","Group","Input","placeholder","icon","iconPosition","value","onChange","target","toLowerCase","Dropdown","multiple","selection","options","text","e","today","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","StopList","stops","setStops","error","setError","setSearch","operators","setOperators","fetchList","contextRef","createRef","list","filter","includes","Container","ref","styled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c45780ac.chunk.js","sourcesContent":["export const fetchGdanskStop = (id) => {\n    const toDelete = '<p style=\"font-size: 8pt; font-style:italic;margin-top: 0;text-align:center;\">Źródło danych: narzędzie oprogramowania SIP opracowane przez <a href=\"http://www.gmv.com\">GMV</a></p>'\n    const corsProxy = 'https://cors-anywhere.herokuapp.com/'\n    const url = `${corsProxy}http://ztm.gda.pl/rozklady/pobierz_SIP.php?n[0]=${id}`\n    return fetch(url)\n        .then(response => {\n            const contenttype = response.headers.get(\"content-type\");\n            const charset = contenttype.substring(contenttype.indexOf(\"charset=\") + 8);\n            return response.arrayBuffer()\n                .then(ab => {\n                    const dataView = new DataView(ab);\n                    const decoder = new TextDecoder(charset);\n                    const decoded = decoder.decode(dataView);\n                    return decoded.replace(toDelete, '')\n                })\n        })\n}","import axios from 'axios'\n\nexport const fetchGdyniaStop = async (id) => {\n    try {\n        const corsProxy = 'https://cors-anywhere.herokuapp.com/'\n        const url=`${corsProxy}https://zkmgdynia.pl/stopsAPI/getDisplay/${id}`;\n        const { data } = await axios.get(url);\n        return data.delay\n    }\n    catch (err) {\n        console.log(err);  \n    }\n}","import React from 'react'\n\nexport const GdyniaStop = ({ stop, stopid }) => {\n\n    const table = stop.map(element => {     \n        return <tr key={element.delay+stopid}><td>{element.shortName}</td><td>{element.headSign}</td><td>{element.delayDesc}</td></tr>\n    })\n\n    return <div><table>\n        <thead><tr><th>Linia</th><th style={{minWidth:\"200px\"}}>Kierunek</th><th>Odjazd</th></tr></thead>\n        <tbody>{table}</tbody>\n    </table>\n    </div>\n\n}","import React, { useState, useEffect } from 'react'\nimport { fetchGdanskStop } from './gdanskFetcher';\nimport { fetchGdyniaStop } from './gdyniaFetcher';\nimport { GdyniaStop } from './GdyniaStop';\n\nexport const Stop = ({ stopId }) => {\n    const [table, setTable] = useState(null);\n    const [gdyniaStop, setGdyniaStop] = useState(null)\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n        if (stopId < 30000) {\n            getGdansk(stopId)\n        }\n        else {getGdynia(stopId)}\n\n    }, [stopId])\n\n    const getGdansk = async (id) => {\n        setLoading(true)\n        const stop = await fetchGdanskStop(id)\n        setTable({\n            __html: stop\n        })\n        setLoading(false)\n    }\n\n    const getGdynia = async (id) => {\n        setLoading(true)\n        const stop = await fetchGdyniaStop(id)\n        setGdyniaStop(stop)\n        setLoading(false)\n    }\n\n    return loading ?\n        <p>loading</p>\n        : (gdyniaStop \n            ? <GdyniaStop stopid={stopId} stop={gdyniaStop} />\n            :<div dangerouslySetInnerHTML={table}></div>)\n}","import React, { useState, Fragment } from 'react'\nimport { List, Accordion, Label } from 'semantic-ui-react'\nimport { Stop } from '../Stop/Stop'\n\ninterface Props {\n    stop: {\n        // stopId: number;\n        // stopCode: string;\n        // stopName: string;\n        // stopShortName: string;\n        // stopDesc: string;\n        // subName: string;\n        // date: string;\n        // zoneId: number;\n        // zoneName: string;\n        // virtual: number;\n        // nonpassenger: number;\n        // depot: number;\n        // ticketZoneBorder: number;\n        // onDemand: number;\n        // activationDate: string;\n        // stopLat: number;\n        // stopLon: number;\n        // stopUrl: string;\n        // locationType: null;\n        // parentStation: null;\n        // stopTimezone: string\n        // wheelchairBoarding: null;\n    }\n\n\n}\n\nexport const ListElement = ({ stop }: any) => {\n    const [colapsed, setColapsed] = useState(true)\n\n    const handleClick = () => {\n        setColapsed(!colapsed)\n        console.log(stop)\n    }\n\n    return <Fragment key={stop.stopId}>\n        <Accordion.Title key={stop.stopId + 'title'} active={!colapsed} onClick={handleClick}>\n            {stop.stopId >= 30000\n                ? <>\n                    <Label size='tiny' color='blue' content={'ZKM'} />\n                    {stop.stopDesc}\n                    {stop.stopCode && <Label circular size='tiny' content={stop.stopCode} />}                </>\n                : <>\n                    <Label size='tiny' color='red' content={'ZTM'} />\n                    {stop.stopDesc}\n                    {stop.stopCode && <Label circular size='tiny' content={stop.stopCode} />}\n                </>\n            }\n        </Accordion.Title>\n        <Accordion.Content key={stop.stopId + 'content'} active={!colapsed} >\n            {!colapsed &&\n                <Stop stopId={stop.stopId} />}\n        </Accordion.Content>\n    </Fragment>\n\n}","import React from 'react'\nimport { Form, Sticky } from 'semantic-ui-react'\n\nconst Filter = ({ search, name, stickyContext, operator, handleOperator }) => {\n    const handleChange = ({target}) => {\n        search(target.value.toLowerCase());\n    }\n\n    const handleDropdownChange = (e, {value}) => {\n        console.log(value);\n        handleOperator(value)\n        \n    }\n\n    const options = [\n        { key: 'ztm', text: 'ZTM Gdańsk', value: 'ztm' },\n        { key: 'zkm', text: 'ZKM Gdynia', value: 'zkm' }\n    ]\n\n    return <Sticky context={stickyContext}>\n        <Form >\n            <Form.Group >\n                <Form.Input\n                    placeholder='Wyszukaj...'\n                    name='search'\n                    icon='search'\n                    iconPosition='left'\n                    value={name}\n                    onChange={handleChange}\n                />\n                <Form.Dropdown\n                    placeholder='Przewoźnik'\n                    multiple\n                    selection\n                    options={options}\n                    onChange={handleDropdownChange}\n                    value={operator}\n                />\n            </Form.Group>\n        </Form>\n    </Sticky>\n\n}\n\nexport { Filter }\n","import React, { useState, useEffect, createRef } from 'react'\nimport { Accordion, Container, Sticky } from 'semantic-ui-react'\n\nimport { getDate } from '../../utils/getDate'\nimport axios from 'axios'\nimport { ListElement } from './ListElement'\nimport { Filter } from './Filter/Filter'\n\n\nconst today = getDate()\n\nconst StopList: Function = (): JSX.Element[] | JSX.Element => {\n    const [stops, setStops] = useState([])\n    const [loading, setLoading] = useState<boolean>(false)\n    const [error, setError] = useState<boolean | null>(null)\n    const [search, setSearch] = useState<string>('')\n    const [operators, setOperators] = useState<Array<string>>([])\n\n    useEffect(() => {\n        fetchList()\n    }, [])\n\n    const contextRef = createRef<HTMLDivElement>()\n\n    const fetchList = async () => {\n        try {\n            setLoading(true)\n            const url = \"https://ckan.multimediagdansk.pl/dataset/c24aa637-3619-4dc2-a171-a23eec8f2172/resource/4c4025f0-01bf-41f7-a39f-d156d201b82b/download/stops.json\";\n            const { data } = await axios.get(url);\n            setStops(data[today].stops)\n            setLoading(false)\n        }\n        catch (err) {\n            setError(err)\n            setLoading(false)\n        }\n    }\n\n    const handleSearch = (search: string) => {\n        setSearch(search)\n    }\n\n    const handleOperator = (operator: Array<string>) => {\n        setOperators(operator)\n    }\n\n    const list = stops\n        .filter((stop: any) => {\n            if (operators.length === 0 || operators.length === 2 )return stop\n            if (operators.length === 1 && operators.includes('ztm') && stop.stopId < 30000 ) return stop\n            if (operators.length === 1 && operators.includes('zkm') && stop.stopId >= 30000) return stop\n        })\n        .filter((stop: any) => {\n            const stopDesc = stop.stopDesc.toLowerCase()\n            return stopDesc.includes(search)\n        })\n        .map((stop: any) => <ListElement key={stop.stopId + 'accordition'} stop={stop} />)\n\n    if (loading) { return <h1>loading</h1> }\n    if (error) { return <h1>Error!</h1> }\n    return <Container >\n        <div ref={contextRef}>\n            <Filter search={handleSearch} handleOperator={handleOperator} operator={operators} name={search} stickyContext={contextRef} />\n            <Accordion styled >\n                {list}\n            </Accordion>\n        </div>\n    </Container>\n}\n\nexport { StopList }","export function getDate() {\n\n    var d = new Date(),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear();\n\nif (month.length < 2) \n    month = '0' + month;\nif (day.length < 2) \n    day = '0' + day;\n\nreturn [year, month, day].join('-');\n}\n","import React from 'react';\nimport { StopList } from './Components/List/List';\nimport 'semantic-ui-css/semantic.min.css'\n\n\nconst App =() =>{\n  return (\n    <>\n      <StopList key='list' />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}